package cn.edu.scau.hlyz.controller;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.URLDecoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.multipart.MultipartFile;

import cn.edu.scau.hlyz.entity.Advisory;
import cn.edu.scau.hlyz.entity.Clinic;
import cn.edu.scau.hlyz.entity.ConsumptionOrder;
import cn.edu.scau.hlyz.entity.Doctor;
import cn.edu.scau.hlyz.entity.Evaluation;
import cn.edu.scau.hlyz.entity.Illness;
import cn.edu.scau.hlyz.entity.MedicalRecord;
import cn.edu.scau.hlyz.entity.Patient;
import cn.edu.scau.hlyz.entity.RegistrationForm;
import cn.edu.scau.hlyz.entity.Reply;
import cn.edu.scau.hlyz.entity.Suser;
import cn.edu.scau.hlyz.jsonprocessor.JsonDateVauleProcessor;
import cn.edu.scau.hlyz.service.AdvisoryService;
import cn.edu.scau.hlyz.service.ClinicService;
import cn.edu.scau.hlyz.service.ConsumptionOrderService;
import cn.edu.scau.hlyz.service.EvaluationService;
import cn.edu.scau.hlyz.service.IdGeneratorService;
import cn.edu.scau.hlyz.service.IllnessService;
import cn.edu.scau.hlyz.service.MedicalRecordService;
import cn.edu.scau.hlyz.service.MessagePushService;
import cn.edu.scau.hlyz.service.PatientInformationService;
import cn.edu.scau.hlyz.service.PhysicianInformationService;
import cn.edu.scau.hlyz.service.RegisteredService;
import cn.edu.scau.hlyz.util.LocalHostLANAddress;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

@Controller
@RequestMapping(value="/patient")
public class PatientController {

	@Autowired
	private PatientInformationService patientService;
	@Autowired
	private ClinicService clinicService;
	@Autowired
	private PhysicianInformationService doctorService;
	@Autowired
	private RegisteredService registeredService;
	@Autowired
	private AdvisoryService advisoryService;
	@Autowired
	private EvaluationService evaluationService;
	@Autowired
	private IdGeneratorService idGeneratorService;
	@Autowired
	private MedicalRecordService medicalRecordService;
	@Autowired
	private IllnessService illnessService;
	@Autowired
	private MessagePushService messagePushService;
	@Autowired
	private ConsumptionOrderService consumptionOrderService;
	
	private TimeZone zone = TimeZone.getTimeZone("GMT+8:00");
	
	
	@ResponseBody
	@RequestMapping(value="/loadPatient.do", produces="application/json;charset=UTF-8")
	public String loadPatient(String callback) throws UnsupportedEncodingException{
			Map<String, String> map = new HashMap<String, String>();
			HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
			
			//获取病人信息
			Suser user = new Suser();
			user.setUser_id(URLDecoder.decode(request.getParameter("userId"), "UTF-8"));
			Patient patient = patientService.findByUser(user);
			
			//组装结果json
			SimpleDateFormat format = new SimpleDateFormat("yyyy-mm-dd");
			
			map.put("pt_id",  URLDecoder.decode(patient.getPt_id(),"UTF-8"));
			map.put("pt_name", URLDecoder.decode(patient.getPt_name(),"UTF-8"));
			map.put("born", URLDecoder.decode(format.format(patient.getBorn()),"UTF-8"));
			map.put("pt_sex", URLDecoder.decode(patient.getPt_sex(),"UTF-8"));
			map.put("pt_image", URLDecoder.decode(patient.getPt_image(),"UTF-8"));
			map.put("IDCardNumber", URLDecoder.decode(patient.getIDCardNumber(),"UTF-8"));
			map.put("pt_tel", URLDecoder.decode(patient.getPt_tel(),"UTF-8"));
			
			JSONObject resultJSON = JSONObject.fromObject(map);
			String result = callback + "(" + resultJSON.toString() + ")";
			return result;
	}
	
	@ResponseBody
	@RequestMapping(value="/loadClinic.do", produces="application/json;charset=UTF-8")
	public String loadClinic(String callback) {
		//获取所有诊室信息
		int num = clinicService.getFindAllClinicCount();
		List<Clinic> clinicList = clinicService.findAllClinic(1, num);
		
		//组装结果json
		
		JSONArray resultJSON = JSONArray.fromObject(clinicList);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value="/doctorOfClinic.do", produces="application/json;charset=UTF-8")
	public String getDoctorOfClinic(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取诊室的信息
		Clinic clinic = new Clinic();
		clinic.setCl_id(URLDecoder.decode(request.getParameter("clinicId"), "UTF-8"));
		
		//获取诊室中的医师信息
		List<Doctor> doctorList = doctorService.findByFlied("clinic", clinic);
		
		//组装结果json
		JSONArray resultJSON = JSONArray.fromObject(doctorList);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;		
	}
	
	@ResponseBody
	@RequestMapping(value="/remainingNumber.do", produces="application/json;charset=UTF-8")
	public String getRemainigNumber(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取医师id和星期几
		String doctorId = URLDecoder.decode(request.getParameter("doctorId"), "UTF-8");
		
		int dayOfWeek = Integer.parseInt(URLDecoder.decode(request.getParameter("dayOfWeek"), "UTF-8"));
		//获取医师对应星期几的四个时段剩余的挂号数
		int firstTime = 20 - registeredService.getRemainingQuantity(doctorId, dayOfWeek, 8);
		int secondTime = 20 - registeredService.getRemainingQuantity(doctorId, dayOfWeek, 10);
		int thirdTime = 20 - registeredService.getRemainingQuantity(doctorId, dayOfWeek, 14);
		int forthTime = 20 - registeredService.getRemainingQuantity(doctorId, dayOfWeek, 16);
		
		//组装结果json
		List<Integer> list = new ArrayList<Integer>();
		list.add(firstTime);
		list.add(secondTime);
		list.add(thirdTime);
		list.add(forthTime);
		
		JSONArray resultJSON = JSONArray.fromObject(list);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;	
	}
	
	@ResponseBody
	@RequestMapping(value="/advisoryOfDoctor.do", produces="application/json;charset=UTF-8")
	public String getAdvisoryOfDoctor(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取医师id和对应的页数
		String doctorId = URLDecoder.decode(request.getParameter("doctorId"), "UTF-8");
		int page = Integer.parseInt(URLDecoder.decode(request.getParameter("page"), "UTF-8"));
		
		//获取结果数量和对应页数的咨询
		int resultNum = advisoryService.getFindAllAdvisoryOfDoctorCount(doctorId);
		List<Advisory> advisoryList = advisoryService.findAllAdvisoryOfDoctor(doctorId, page, 10);
		
		//组装结果json
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("resultNum", URLDecoder.decode(resultNum+"", "UTF-8"));
		map.put("advisoryArray", advisoryList);
		
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateVauleProcessor());
		JSONObject resultJSON = JSONObject.fromObject(map, jsonConfig);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value="/evaluation.do", produces="application/json;charset=UTF-8")
	public String getEvaluation(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取医师id和对应的页数
		String doctorId = URLDecoder.decode(request.getParameter("doctorId"), "UTF-8");
		int page = Integer.parseInt(URLDecoder.decode(request.getParameter("page"), "UTF-8"));
		//获取结果数量和对应页数的评价
		int num = evaluationService.getFindAllEvaluationOfDoctorCount(doctorId);
		List<Evaluation> evaluationList = evaluationService.findAllEvaluationOfDoctor(doctorId, page, 10);
		
		//组装结果json
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("resultNum", URLDecoder.decode(num+"", "UTF-8"));
		map.put("evaluationArray", evaluationList);
		
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateVauleProcessor());
		JSONObject resultJSON = JSONObject.fromObject(map, jsonConfig);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value="/submitRegistration.do", produces="application/json;charset=UTF-8")
	public String submitRegistration(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取医师id和病人id和挂号时间
		String doctorId = URLDecoder.decode(request.getParameter("doctorId"), "UTF-8");
		String patientId = URLDecoder.decode(request.getParameter("patientId"), "UTF-8");
		int dayOfWeek = Integer.parseInt(URLDecoder.decode(request.getParameter("dayOfWeek"), "UTF-8"));
		int startTime = Integer.parseInt(URLDecoder.decode(request.getParameter("startTime"), "UTF-8"));
		//添加挂号
		//生成挂号时间
		Calendar now = Calendar.getInstance(zone);
		now.set(Calendar.HOUR_OF_DAY, startTime);
		now.set(Calendar.DAY_OF_WEEK, dayOfWeek);
		int num = registeredService.getRemainingQuantity(doctorId, dayOfWeek, startTime);
		now.set(Calendar.MINUTE, num + 1);
		
		System.out.println(now.getTime());
		
		RegistrationForm rf = new RegistrationForm();
		rf.setRf_id(idGeneratorService.registrationFormIdGenerator());
		Doctor doctor = new Doctor();
		doctor.setDt_id(doctorId);
		Patient patient = new Patient();
		patient.setPt_id(patientId);
		rf.setDoctor(doctor);
		rf.setPatient(patient);
		rf.setRf_status("uncompleted");
		rf.setRf_time(now.getTime());
		
		int res = registeredService.addRegister(rf)? 1 : 0;
		
		//组装结果json
		Map<String, Integer> map = new HashMap<String, Integer>();
		map.put("result", res);
		
		JSONObject resultJSON = JSONObject.fromObject(map);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value="/submitAdvisory.do", produces="application/json;charset=UTF-8")
	public String submitAdvisory(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取咨询信息
		String doctorId = URLDecoder.decode(request.getParameter("doctorId"), "UTF-8");
		String patientId = URLDecoder.decode(request.getParameter("patientId"), "UTF-8");
		String adTitle = URLDecoder.decode(request.getParameter("ad_title"), "UTF-8");
		String adContent = URLDecoder.decode(request.getParameter("ad_content"), "UTF-8");
		
		//拼装咨询对象
		Advisory advisory = new Advisory();
		Doctor doctor = new Doctor();
		doctor.setDt_id(doctorId);
		Patient patient = new Patient();
		patient.setPt_id(patientId);
		advisory.setAd_id(idGeneratorService.advisoryIdGenertor());
		advisory.setDoctor(doctor);
		advisory.setPatient(patient);
		advisory.setAd_title(adTitle);
		advisory.setAd_content(adContent);
		advisory.setAd_time(Calendar.getInstance(zone).getTime());
		
		//保存咨询对象
		int res = advisoryService.addAdvisory(advisory)? 1 : 0;
		
		//组装结果json
		Map<String, Integer> map = new HashMap<String, Integer>();
		map.put("result", res);
		
		JSONObject resultJSON = JSONObject.fromObject(map);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value="/advisoryOfPatient.do", produces="application/json;charset=UTF-8")
	public String getAdvisoryOfPatient(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取病人id和页数
		String patientId = URLDecoder.decode(request.getParameter("patientId"), "UTF-8");
		int page = Integer.parseInt(URLDecoder.decode(request.getParameter("page"), "UTF-8"));
		
		//获取结果数和对应页数的咨询信息
		int num = advisoryService.getFindAllAdvisoryOfPatientCount(patientId);
		List<Advisory> advisoryList = advisoryService.findAllAdvisoryOfPatient(patientId, page, 10);
		
		//组装结果json
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("resultNum", URLDecoder.decode(num+"", "UTF-8"));
		map.put("advisoryArray", advisoryList);
		
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateVauleProcessor());
		JSONObject resultJSON = JSONObject.fromObject(map, jsonConfig);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value="advisoryWithReply.do", produces="application/json;charset=UTF-8")
	public String getAdvisoryWithReply(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取咨询的id
		String advisoryId = URLDecoder.decode(request.getParameter("ad_id"), "UTF-8");
		
		//获取结果总数和回复信息
		int num = advisoryService.getFindAllRespondenceOfAdvisory(advisoryId);
		List<Reply> replyList= advisoryService.findAllRespondenceOfAdvisory(advisoryId, 1, num);
		Advisory advisory = advisoryService.findAdvisoryById(advisoryId);
		Doctor doctor = advisory.getDoctor();
		Suser user = new Suser();
		user.setUser_id(advisory.getPatient().getPt_id());
		Patient patient = patientService.findByUser(user);
		
		//组装结果json
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("resultNum", URLDecoder.decode(num+"", "UTF-8"));
		map.put("replyArray", replyList);
		map.put("doctor", doctor);
		map.put("patient", patient);
		
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateVauleProcessor("yyyy-MM-dd HH:mm:ss"));
		JSONObject resultJSON = JSONObject.fromObject(map, jsonConfig);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value="/submitReply.do", produces="application/json;charset=UTF-8")
	public String submitReply(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取咨询的ad_id和病人的patient_id和回复内容re_content
		String advisoryId = URLDecoder.decode(request.getParameter("ad_id"), "UTF-8");
		String patientId = URLDecoder.decode(request.getParameter("patient_id"), "UTF-8");
		String re_content = URLDecoder.decode(request.getParameter("re_content"), "UTF-8");
		
		//添加回复信息到数据库
		Reply reply = new Reply();
		reply.setRe_id(idGeneratorService.ReplyIdGenerator());
		reply.setRe_content(re_content);
		reply.setRe_time(Calendar.getInstance(zone).getTime());
		Suser user = new Suser();
		user.setUser_id(patientId);
		Advisory advisory = new Advisory();
		advisory.setAd_id(advisoryId);
		reply.setRe_Consultaion(advisory);
		reply.setRespondent(user);
		
		int res = advisoryService.addRespondence(reply)? 1 : 0;
		
		//组装结果json
		Map<String, Integer> map = new HashMap<String, Integer>();
		map.put("result", res);
		
		JSONObject resultJSON = JSONObject.fromObject(map);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value="/allMedicalRecord.do", produces="application/json;charset=UTF-8")
	public String getAllMedicalRecord(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取病人的patient_id和页数
		String patientId = URLDecoder.decode(request.getParameter("patient_id"), "UTF-8");
		int page = Integer.parseInt(URLDecoder.decode(request.getParameter("page"), "UTF-8"));
		
		//获取病历信息总数和对应页数的病历信息
		int num = medicalRecordService.getFindByPatientCount(patientId);
		List<MedicalRecord> mrList = medicalRecordService.findByPatient(patientId, page, 10); 
		
		//组装结果json
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("resultNum", URLDecoder.decode(num+"", "UTF-8"));
		map.put("mrArray", mrList);
		
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateVauleProcessor("yyyy-MM-dd HH:mm:ss"));
		JSONObject resultJSON = JSONObject.fromObject(map, jsonConfig);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value="/oneMedicalRecord.do", produces="application/json;charset=UTF-8")
	public String getOneMedicalRecord(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取病历id
		String mrId = URLDecoder.decode(request.getParameter("mr_id"), "UTF-8");
		
		//获取某一病历的具体信息和医师的诊室信息和病人信息
		MedicalRecord mr = medicalRecordService.findById(mrId);
		Suser user = new Suser();
		user.setUser_id(mr.getDoctor().getDt_id());
		Doctor docotor = doctorService.findByUser(user);
		Clinic clinic = docotor.getClinic();
		user.setUser_id(mr.getPatient().getPt_id());
		Patient patient = patientService.findByUser(user);
		
		//组装结果json
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("medicalRecord", mr);
		map.put("clinic", clinic);
		map.put("patient", patient);
		
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateVauleProcessor("yyyy-MM-dd HH:mm:ss"));
		JSONObject resultJSON = JSONObject.fromObject(map, jsonConfig);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value="/searchIllness.do", produces="application/json;charset=UTF-8")
	public String searchIllness(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取搜索关键字
		String searchKey = URLDecoder.decode(request.getParameter("searchKey"), "UTF-8");
		
		//查询对应的疾病信息
		List<Illness> illList = illnessService.findByName(searchKey);
		
		//组装结果json
		JSONArray resultJSON = JSONArray.fromObject(illList);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@RequestMapping(value="/setting.do", produces="application/json;charset=UTF-8")
	public void updateSetting(@RequestParam(value="image", required=false) MultipartFile image,
			@RequestParam(value="pt_id", required=false) String patientId,
			@RequestParam(value="pt_name", required=false) String patientName,
			@RequestParam(value="pt_sex", required=false) String patientSex,
			@RequestParam(value="born", required=false) String born,
			@RequestParam(value="pt_tel", required=false) String patientTel,
			HttpServletRequest request, HttpServletResponse response) throws ParseException, IOException{
		//获取病人信息
		patientId = URLDecoder.decode(patientId, "UTF-8");
		Suser user = new Suser();
		user.setUser_id(patientId);
		Patient patient = patientService.findByUser(user);
		patient.setPt_name(URLDecoder.decode(patientName, "UTF-8"));
		patient.setPt_sex(URLDecoder.decode(patientSex, "UTF-8"));
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
		patient.setBorn(simpleDateFormat.parse(URLDecoder.decode(born, "UTF-8")));
		patient.setPt_tel(URLDecoder.decode(patientTel, "UTF-8"));
		
		//上传图片
		if(image != null){
			String realPath = request.getServletContext().getRealPath("headImage");
			String fileName = System.currentTimeMillis() + image.getOriginalFilename();
			File targetFile = new File(realPath, fileName);
			//判断文件夹headImage是否存在
			if(!targetFile.exists()){
				targetFile.mkdirs();
			}
			//上传
			try{
				image.transferTo(targetFile);
				String imageURL = request.getScheme() + "://" + 
									LocalHostLANAddress.getLocalHostLANAddress() +
								   ":"+ request.getServerPort() + request.getContextPath() +
									"/" + "headImage" + '/' + targetFile.getName();
				patient.setPt_image(imageURL);
			} catch(Exception e){
				e.printStackTrace();
				return ;
			}
		}
		//更新病人信息
		int res = patientService.updateInformation(patient)? 1 : 0;
		
		//返回结果
		response.getWriter().write(res+"");
		response.setHeader("Access-Control-Allow-Origin", "*");
	}

	@ResponseBody
	@RequestMapping(value="/callRegistration.do", produces="application/json;charset=UTF-8")
	public String callRegistration(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取病人的id
		String patientId = URLDecoder.decode(request.getParameter("patientId"), "UTF-8");
		
		//检查是否被呼叫
//		messagePushService.addCallRegistration(registeredService.findById("1"));
		
		RegistrationForm rf = messagePushService.findCallRegistration(patientId);
		int res = 0;
		if(rf != null){
			res = 1;
			Suser user = new Suser();
			user.setUser_id(rf.getDoctor().getDt_id());
			rf.setDoctor(doctorService.findByUser(user));
		}
		
		//返回结果
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("result", res);
		map.put("registrationForm", rf);
		
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateVauleProcessor("yyyy-MM-dd HH:mm:ss"));
		JSONObject resultJSON = JSONObject.fromObject(map, jsonConfig);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value="/askCOrder.do", produces="application/json;charset=UTF-8")
	public String askConsumptionOrder(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取病人的id
		String patientId = URLDecoder.decode(request.getParameter("patientId"), "UTF-8");
		
		//检查是否有消费单推送
//		messagePushService.addPushConsumpationOrder(consumptionOrderService.findConsumptionById("2"));
		
		ConsumptionOrder co = messagePushService.findPushConsumptionOrder(patientId);
		int res = 0;
		if(co != null){
			res = 1;
			co = consumptionOrderService.findConsumptionById(co.getCo_id());
		}
		
		//返回结果
		Map<String, Object> map = new HashMap<>();
		map.put("result", res);
		map.put("consumptionOrder", co);
		
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateVauleProcessor("yyyy-MM-dd HH:mm:ss"));
		JSONObject resultJSON = JSONObject.fromObject(map, jsonConfig);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	
	@ResponseBody
	@RequestMapping(value="/submitEvaluation.do", produces="application/json;charset=UTF-8")
	public String submitEvaluation(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取病人的id,医师的id和评价内容
		String patientId = URLDecoder.decode(request.getParameter("patientId"), "UTF-8");
		String doctorId = URLDecoder.decode(request.getParameter("doctorId"), "UTF-8");
		String evContent = URLDecoder.decode(request.getParameter("ev_content"), "UTF-8");
		double evScore = Double.parseDouble(URLDecoder.decode(request.getParameter("ev_score"), "UTF-8"));
		String rf_id = URLDecoder.decode(request.getParameter("rf_id"), "UTF-8");
		
		//添加评价信息
		Evaluation ev = new Evaluation();
		ev.setEv_id(idGeneratorService.evaluationIdGenerator());
		ev.setEv_content(evContent);
		ev.setEv_score(evScore);
		ev.setEv_status("unread");
		RegistrationForm rf = new RegistrationForm();
		rf.setRf_id(rf_id);
		ev.setRf(rf);
		Doctor doctor = new Doctor();
		doctor.setDt_id(doctorId);
		ev.setDoctor(doctor);
		Patient patient = new Patient();
		patient.setPt_id(patientId);
		ev.setPatient(patient);
		
		int res = evaluationService.addEvaluation(ev)? 1 : 0;
		
		//返回结果
		Map<String, Object> map = new HashMap<>();
		map.put("result", res);
		JSONObject resultJSON = JSONObject.fromObject(map);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value="/validRegistration.do", produces="application/json;charset=UTF-8")
	public String getValidRegistration(String callback) throws UnsupportedEncodingException{
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		//获取病人的id
		String patientId = URLDecoder.decode(request.getParameter("pt_id"), "UTF-8");
		
		//获取有效挂号信息
		List<RegistrationForm> rfList = registeredService.getPatientRegister(patientId);
		for(RegistrationForm rf : rfList){
			Suser user = new Suser();
			user.setUser_id(rf.getDoctor().getDt_id());
			rf.setDoctor(doctorService.findByUser(user));
		}
		
		//返回结果
		JsonConfig jsonConfig = new JsonConfig();
		jsonConfig.registerJsonValueProcessor(Date.class, new JsonDateVauleProcessor("yyyy-MM-dd HH:mm:ss"));
		JSONArray resultJSON = JSONArray.fromObject(rfList, jsonConfig);
		String result = callback + "(" + resultJSON.toString() + ")";
		return result;
	}
}
